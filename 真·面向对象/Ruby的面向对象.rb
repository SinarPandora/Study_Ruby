=begin
Ruby 是真正的面向对象，不存在单纯的数值类型

面向对象基本概念：

·封装：
  指使对象管理的数据不能直接从外部进行操作，必须通过调用对象的方法来完成（比如存取器）
  可以防止因把非法数据设置给对象而使程序产生异常的情况发生
  Ruby 对象默认情况下封装（private）
  另一个好处是，可以隐藏对象内部数据处理的具体细节，把内部逻辑抽象的表现出来

·多态：
  不同对象对同一功能的实现逻辑和效果具有不同解释，这就是多态
  （换句话说，就是：不同对象可以根据需要将同一类方法以不同的方式实现）

·鸭子类型：
  鸭子类型是多态的扩展。“能像鸭子一样走路，像鸭子一样叫的，那就一定是鸭子。”
  只有拥有相同行为，就可以视为相同类型的对象
  Ruby 是弱类型语言
  举例：
=end
      def fetch_and_downcase(ary, index)
        # 找到数组中某一成员，并返回其小写格式
        if (str = ary[index])
          str.downcase
        end
      end
      a = ['Aha', "Foo", "Bar"]
      b = {0 => 'Aha', 1 => "Foo", 2 => "Bar"}
      p fetch_and_downcase a, 0 #=> "aha"
      p fetch_and_downcase b, 1 #=> "foo"
=begin
  看似是给数组准备的方法，然而传入一个满足条件的字典也能顺利的执行
  所以实际上这个方法要求的并不是确切的数据类型，而是：
  1. 能以 ary[index] 方法取出元素
  2. 获取的元素支持 downcase 方法
  的所有对象
  鸭子类型虽然增加了查错难度，但简化了代码的编写，不必为相同方法但不同类型的对象分别拟定方法
=end